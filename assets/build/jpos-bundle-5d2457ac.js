class StateManager{constructor(){this.state={auth:{user: null,isLoggedIn: false},drawer:{isOpen: false,data: null,openingAmount: 0,closingAmount: 0},products:{all: [],currentForModal: null,stockList: [],editingProduct: null},cart:{items: [],paymentMethod: 'Cash',fee:{amount: '',label: '',amountType: 'flat'},discount:{amount: '',label: '',amountType: 'flat'},feeDiscount:{type: null,amount: '',label: '',amountType: 'flat'},splitPayments: null},orders:{all: [],filters:{date: 'all',status: 'all',source: 'all',orderId: ''}},filters:{search: '',searchType: 'name',stock: 'all',category: 'all',tag: 'all'},stockFilters:{stock: 'all',category: 'all',tag: 'all'},returns:{fromOrderId: null,items: []},settings:{receipt:{},session:{sessions: [],charts:{}}},nonces:{login: '',logout: '',checkout: '',settings: '',drawer: '',stock: '',refund: ''},ui:{currentPage: 'products',isLoading: false,error: null}};}updateState(path,value){const keys=path.split('.');let current=this.state;for(let i=0;i < keys.length-1;i++){if(!current[keys[i]]){current[keys[i]]={};}current=current[keys[i]];}current[keys[keys.length-1]]=value;return current[keys[keys.length-1]];}getState(path){const keys=path.split('.');let current=this.state;for(const key of keys){if(current && typeof current==='object' && key in current){current=current[key];}else{return undefined;}}return current;}validateState(){if(this.state.auth.isLoggedIn && !this.state.auth.user){console.warn('State inconsistency: isLoggedIn is true but user is null');this.state.auth.isLoggedIn=false;}if(this.state.drawer.isOpen && !this.state.drawer.data){console.warn('State inconsistency: drawer is open but data is null');}if(this.state.cart.items && !Array.isArray(this.state.cart.items)){console.warn('State inconsistency: cart.items should be an array');this.state.cart.items=[];}}resetState(){this.state.auth={user: null,isLoggedIn: false};this.state.drawer={isOpen: false,data: null,openingAmount: 0,closingAmount: 0};this.state.cart.items=[];this.state.cart.paymentMethod='Cash';this.state.cart.fee={amount: '',label: '',amountType: 'flat'};this.state.cart.discount={amount: '',label: '',amountType: 'flat'};this.state.cart.feeDiscount={type: null,amount: '',label: '',amountType: 'flat'};this.state.cart.splitPayments=null;this.state.returns.fromOrderId=null;this.state.returns.items=[];this.state.ui.error=null;}getFullState(){return this.state;}subscribe(path,callback){this._subscribers=this._subscribers ||{};this._subscribers[path]=this._subscribers[path] || [];this._subscribers[path].push(callback);}notify(path,value){if(this._subscribers && this._subscribers[path]){this._subscribers[path].forEach(callback=> callback(value));}}}window.stateManager=new StateManager();if(typeof module !=='undefined' && module.exports){module.exports=StateManager;}
class AuthManager{constructor(stateManager){this.stateManager=stateManager;}async init(){await this.checkAuthStatus();}async checkAuthStatus(){try{const response=await fetch('/jpos/api/auth.php?action=check_status');if(!response.ok)throw new Error(`Server responded with ${response.status}`);const result=await response.json();if(result.success && result.data.loggedIn){this.stateManager.updateState('auth.user',result.data.user);this.stateManager.updateState('auth.isLoggedIn',true);return true;}else{this.stateManager.updateState('auth.user',null);this.stateManager.updateState('auth.isLoggedIn',false);return false;}}catch(error){console.error('Auth status check failed:',error);this.stateManager.updateState('auth.user',null);this.stateManager.updateState('auth.isLoggedIn',false);return false;}}async handleLogin(e){e.preventDefault();const form=e.target;const button=form.querySelector('button');button.disabled=true;document.getElementById('login-error').textContent='';const data={action: 'login',username: form.username.value,password: form.password.value,nonce: this.stateManager.getState('nonces.login')};try{const response=await fetch('/jpos/api/auth.php',{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify(data)});const responseText=await response.text();if(!response.ok)throw new Error(`HTTP error! status: ${response.status},body: ${responseText}`);const result=JSON.parse(responseText);if(result.success){this.stateManager.updateState('auth.user',result.data.user);this.stateManager.updateState('auth.isLoggedIn',true);form.reset();return true;}else{this.showLoginScreen(true,result.message || 'Login failed.');return false;}}catch(error){console.error("Login error details:",error);this.showLoginScreen(true,`Network error during login. Please try again.`);return false;}finally{button.disabled=false;}}async handleLogout(){if(this.stateManager.getState('drawer.isOpen')){alert("Please close the cash drawer before logging out.");return;}try{await fetch('/jpos/api/auth.php?action=logout&nonce='+encodeURIComponent(this.stateManager.getState('nonces.logout')));this.stateManager.resetState();this.showLoginScreen(true);return true;}catch(error){console.error('Logout error:',error);return false;}}showLoginScreen(show,message=''){const loginScreen=document.getElementById('login-screen');const mainApp=document.getElementById('main-app');const errorElement=document.getElementById('login-error');if(show){loginScreen.classList.remove('hidden');mainApp.classList.add('hidden');if(message){errorElement.textContent=message;}}else{loginScreen.classList.add('hidden');mainApp.classList.remove('hidden');errorElement.textContent='';}}async generateNonces(){try{const nonces={login: document.getElementById('jpos-login-nonce')?.value || '',logout: document.getElementById('jpos-logout-nonce')?.value || '',checkout: document.getElementById('jpos-checkout-nonce')?.value || '',settings: document.getElementById('jpos-settings-nonce')?.value || '',drawer: document.getElementById('jpos-drawer-nonce')?.value || '',stock: document.getElementById('jpos-stock-nonce')?.value || '',refund: document.getElementById('jpos-refund-nonce')?.value || ''};this.stateManager.updateState('nonces',nonces);}catch(error){console.error('Error generating nonces:',error);}}isAuthenticated(){return this.stateManager.getState('auth.isLoggedIn')===true;}getCurrentUser(){return this.stateManager.getState('auth.user');}async loadFullApp(){this.showLoginScreen(false);document.getElementById('main-app').classList.remove('hidden');document.getElementById('user-display-name').textContent=this.stateManager.getState('auth.user.displayName');await this.generateNonces();this.stateManager.validateState();if(window.appInitializer){await window.appInitializer.init();}}}if(typeof module !=='undefined' && module.exports){module.exports=AuthManager;}
class ProductsManager{constructor(stateManager){this.stateManager=stateManager;}async loadProducts(){try{const response=await fetch('/jpos/api/products.php');if(!response.ok)throw new Error(`API Error: ${response.statusText}`);const result=await response.json();if(!result.success)throw new Error(result.data.message || 'Failed to load products.');this.stateManager.updateState('products.all',result.data.products || []);return result.data;}catch(error){console.error('Failed to load products:',error);this.stateManager.updateState('products.all',[]);throw error;}}buildFilterUI(categories,tags){const filterContainer=document.getElementById('filter-container');if(!filterContainer)return;filterContainer.innerHTML=` <div class="flex flex-wrap gap-2 mb-4"> <select id="category-filter" class="px-3 py-2 bg-slate-700 text-slate-200 rounded-lg border border-slate-600"> <option value="all">All Categories</option> ${categories.map(cat=> `<option value="${cat.slug}">${cat.name}</option>`).join('')}</select> <select id="tag-filter" class="px-3 py-2 bg-slate-700 text-slate-200 rounded-lg border border-slate-600"> <option value="all">All Tags</option> ${tags.map(tag=> `<option value="${tag.slug}">${tag.name}</option>`).join('')}</select> <select id="stock-filter" class="px-3 py-2 bg-slate-700 text-slate-200 rounded-lg border border-slate-600"> <option value="all">All Stock</option> <option value="in-stock">In Stock</option> <option value="out-of-stock">Out of Stock</option> <option value="low-stock">Low Stock</option> </select> </div> `;document.getElementById('category-filter').addEventListener('change',(e)=>{this.stateManager.updateState('filters.category',e.target.value);this.renderProducts();});document.getElementById('tag-filter').addEventListener('change',(e)=>{this.stateManager.updateState('filters.tag',e.target.value);this.renderProducts();});document.getElementById('stock-filter').addEventListener('change',(e)=>{this.stateManager.updateState('filters.stock',e.target.value);this.renderProducts();});}handleSearch(e){const query=e.target.value.toLowerCase();this.stateManager.updateState('filters.search',query);this.renderProducts();}renderProducts(){const products=this.stateManager.getState('products.all');const filters=this.stateManager.getState('filters');const container=document.getElementById('product-list');if(!container)return;let filteredProducts=products.filter(product=>{if(filters.search){const searchFields=[product.name,product.sku].join(' ').toLowerCase();if(!searchFields.includes(filters.search))return false;}if(filters.category !=='all'){if(!product.categories || !product.categories.some(cat=> cat.slug===filters.category)){return false;}}if(filters.tag !=='all'){if(!product.tags || !product.tags.some(tag=> tag.slug===filters.tag)){return false;}}if(filters.stock !=='all'){const stockStatus=product.stock_status;if(filters.stock==='in-stock' && stockStatus !=='instock')return false;if(filters.stock==='out-of-stock' && stockStatus !=='outofstock')return false;if(filters.stock==='low-stock' &&(stockStatus !=='instock' || product.stock_quantity > 5))return false;}return true;});if(filteredProducts.length===0){container.innerHTML='<div class="col-span-full text-center text-slate-400 py-8">No products found</div>';return;}container.innerHTML=filteredProducts.map(product=> this.renderProductCard(product)).join('');}renderProductCard(product){const stockClass=product.stock_status==='instock' ? 'text-green-400' : 'text-red-400';const stockText=product.stock_status==='instock' ? 'In Stock' : 'Out of Stock';return ` <div class="bg-slate-800 rounded-lg p-4 border border-slate-700 hover:border-slate-600 transition-colors cursor-pointer" onclick="productsManager.handleProductClick(${product.id})"> <div class="aspect-square bg-slate-700 rounded-lg mb-3 flex items-center justify-center"> ${product.image ? `<img src="${product.image}" alt="${product.name}" class="w-full h-full object-cover rounded-lg">` : `<div class="text-slate-400 text-4xl"><i class="fas fa-box"></i></div>`}</div> <h3 class="font-semibold text-slate-200 mb-1 line-clamp-2">${product.name}</h3> <p class="text-sm text-slate-400 mb-2">SKU: ${product.sku || 'N/A'}</p> <div class="flex justify-between items-center"> <span class="text-lg font-bold text-green-400">$${product.price}</span> <span class="text-sm ${stockClass}">${stockText}</span> </div> </div> `;}async handleProductClick(productId,preselectedSku=null){const product=this.stateManager.getState('products.all').find(p=> p.id===productId);if(!product)return;this.stateManager.updateState('products.currentForModal',product);if(product.type==='variable' && product.variations && product.variations.length > 0){await this.showVariationModal(preselectedSku);}else{this.addToCart(product,1);}}async showVariationModal(preselectedSku=null){const product=this.stateManager.getState('products.currentForModal');if(!product || !product.variations)return;const modal=this.createVariationModal(product,preselectedSku);document.body.appendChild(modal);modal.classList.remove('hidden');}createVariationModal(product,preselectedSku){const modal=document.createElement('div');modal.className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';modal.innerHTML=` <div class="bg-slate-800 rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto"> <div class="flex justify-between items-center mb-4"> <h2 class="text-xl font-bold text-white">${product.name}</h2> <button onclick="this.closest('.fixed').remove()" class="text-slate-400 hover:text-white"> <i class="fas fa-times text-xl"></i> </button> </div> <div class="grid grid-cols-1 md:grid-cols-2 gap-4" id="variation-list"> ${product.variations.map(variation=> this.renderVariationOption(variation,preselectedSku)).join('')}</div> </div> `;return modal;}renderVariationOption(variation,preselectedSku){const isSelected=preselectedSku===variation.sku;const stockClass=variation.stock_status==='instock' ? 'border-green-500' : 'border-red-500';return ` <div class="border-2 ${isSelected ? 'border-blue-500' : stockClass}rounded-lg p-4 cursor-pointer hover:bg-slate-700 transition-colors" onclick="productsManager.selectVariation(${variation.id})"> <div class="flex justify-between items-start mb-2"> <h3 class="font-semibold text-slate-200">${variation.name}</h3> <span class="text-sm ${variation.stock_status==='instock' ? 'text-green-400' : 'text-red-400'}"> ${variation.stock_status==='instock' ? 'In Stock' : 'Out of Stock'}</span> </div> <p class="text-slate-400 text-sm mb-2">SKU: ${variation.sku}</p> <div class="flex justify-between items-center"> <span class="text-lg font-bold text-green-400">$${variation.price}</span> <span class="text-sm text-slate-400">Stock: ${variation.stock_quantity || 0}</span> </div> </div> `;}selectVariation(variationId){const product=this.stateManager.getState('products.currentForModal');const variation=product.variations.find(v=> v.id===variationId);if(variation && variation.stock_status==='instock'){this.addToCart(variation,1);document.querySelector('.fixed.inset-0').remove();}}addToCart(product,quantity=1){const cartItems=this.stateManager.getState('cart.items');const existingItem=cartItems.find(item=> item.id===product.id);if(existingItem){existingItem.qty+=quantity;}else{cartItems.push({id: product.id,name: product.name,price: parseFloat(product.price),qty: quantity,sku: product.sku,type: product.type});}this.stateManager.updateState('cart.items',cartItems);if(window.toastManager){window.toastManager.show(`${product.name}added to cart`);}}}if(typeof module !=='undefined' && module.exports){module.exports=ProductsManager;}
class CartManager{constructor(stateManager){this.stateManager=stateManager;}renderCart(){const cartItems=this.stateManager.getState('cart.items');const container=document.getElementById('cart-items');if(!container)return;if(cartItems.length===0){container.innerHTML='<div class="text-center text-slate-400 py-8">Cart is empty</div>';this.updateCartTotal();return;}container.innerHTML=cartItems.map(item=> this.renderCartItem(item)).join('');this.updateCartTotal();}renderCartItem(item){return ` <div class="bg-slate-700 rounded-lg p-3 flex items-center justify-between"> <div class="flex-1"> <h4 class="font-semibold text-slate-200">${item.name}</h4> <p class="text-sm text-slate-400">$${item.price.toFixed(2)}each</p> </div> <div class="flex items-center space-x-2"> <button onclick="cartManager.updateQuantity(${item.id},-1)" class="w-8 h-8 bg-slate-600 text-white rounded-full hover:bg-slate-500">-</button> <span class="w-8 text-center text-slate-200">${item.qty}</span> <button onclick="cartManager.updateQuantity(${item.id},1)" class="w-8 h-8 bg-slate-600 text-white rounded-full hover:bg-slate-500">+</button> <button onclick="cartManager.removeItem(${item.id})" class="ml-2 text-red-400 hover:text-red-300"> <i class="fas fa-trash"></i> </button> </div> </div> `;}updateQuantity(itemId,change){const cartItems=this.stateManager.getState('cart.items');const item=cartItems.find(item=> item.id===itemId);if(!item)return;item.qty+=change;if(item.qty <=0){this.removeItem(itemId);}else{this.stateManager.updateState('cart.items',cartItems);this.renderCart();}}removeItem(itemId){const cartItems=this.stateManager.getState('cart.items');const filteredItems=cartItems.filter(item=> item.id !==itemId);this.stateManager.updateState('cart.items',filteredItems);this.renderCart();}updateCartTotal(){const cartItems=this.stateManager.getState('cart.items');const subtotal=cartItems.reduce((sum,item)=> sum+(item.price*item.qty),0);const feeDiscount=this.stateManager.getState('cart.feeDiscount');let total=subtotal;if(feeDiscount && feeDiscount.type && feeDiscount.amount){const amount=parseFloat(feeDiscount.amount);if(feeDiscount.type==='discount'){total-=amount;}else if(feeDiscount.type==='fee'){total+=amount;}}const subtotalElement=document.getElementById('cart-subtotal');const totalElement=document.getElementById('cart-total');if(subtotalElement)subtotalElement.textContent=`$${subtotal.toFixed(2)}`;if(totalElement)totalElement.textContent=`$${Math.max(0,total).toFixed(2)}`;}clearCart(fullReset=false){this.stateManager.updateState('cart.items',[]);if(fullReset){this.stateManager.updateState('cart.paymentMethod','Cash');this.stateManager.updateState('cart.fee',{amount: '',label: '',amountType: 'flat'});this.stateManager.updateState('cart.discount',{amount: '',label: '',amountType: 'flat'});this.stateManager.updateState('cart.feeDiscount',{type: null,amount: '',label: '',amountType: 'flat'});this.stateManager.updateState('cart.splitPayments',null);}this.renderCart();}showFeeDiscountModal(type){const modal=document.getElementById('fee-discount-modal');if(!modal)return;this.stateManager.updateState('cart.feeDiscount.type',type);const title=document.querySelector('#fee-discount-modal h2');const amountLabel=document.querySelector('#fee-discount-modal label[for="amount"]');if(title)title.textContent=`Add ${type==='fee' ? 'Fee' : 'Discount'}`;if(amountLabel)amountLabel.textContent=`${type==='fee' ? 'Fee' : 'Discount'}Amount`;modal.classList.remove('hidden');}hideFeeDiscountModal(){const modal=document.getElementById('fee-discount-modal');if(modal)modal.classList.add('hidden');}applyFeeDiscount(){const type=this.stateManager.getState('cart.feeDiscount.type');const amount=document.getElementById('fee-amount').value;const label=document.getElementById('fee-label').value;const amountType=document.querySelector('input[name="amount-type"]:checked')?.value || 'flat';if(!amount || parseFloat(amount)<=0){alert('Please enter a valid amount');return;}const feeDiscount={type: type,amount: amount,label: label || `${type==='fee' ? 'Fee' : 'Discount'}-$${amount}`,amountType: amountType};this.stateManager.updateState('cart.feeDiscount',feeDiscount);this.hideFeeDiscountModal();this.updateCartTotal();}removeFeeDiscount(){this.stateManager.updateState('cart.feeDiscount',{type: null,amount: '',label: '',amountType: 'flat'});this.updateCartTotal();}async processTransaction(){const cartItems=this.stateManager.getState('cart.items');const paymentMethod=this.stateManager.getState('cart.paymentMethod');const feeDiscount=this.stateManager.getState('cart.feeDiscount');const splitPayments=this.stateManager.getState('cart.splitPayments');if(cartItems.length===0){alert('Cart is empty');return;}try{const payload={cart_items: cartItems,payment_method: paymentMethod,fee_discount: feeDiscount.type ? feeDiscount : null,nonce: this.stateManager.getState('nonces.checkout')};if(splitPayments && splitPayments.length > 1){payload.split_payments=splitPayments;}const response=await fetch('/jpos/api/checkout.php',{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify(payload)});if(!response.ok){const errorData=await response.json().catch(()=>({message: `Server responded with ${response.status}`}));throw new Error(errorData.message);}const result=await response.json();if(result.success){if(window.receiptManager){window.receiptManager.showReceipt(result.data.receipt_data);}this.clearCart();if(window.toastManager){window.toastManager.show('Transaction completed successfully!');}}else{throw new Error(result.message || 'Transaction failed');}}catch(error){console.error('Transaction error:',error);alert('Transaction failed: '+error.message);}}saveCartState(){const cartData={items: this.stateManager.getState('cart.items'),paymentMethod: this.stateManager.getState('cart.paymentMethod'),feeDiscount: this.stateManager.getState('cart.feeDiscount')};localStorage.setItem('jpos_cart_state',JSON.stringify(cartData));}loadCartState(){try{const saved=localStorage.getItem('jpos_cart_state');if(saved){const cartData=JSON.parse(saved);this.stateManager.updateState('cart.items',cartData.items || []);this.stateManager.updateState('cart.paymentMethod',cartData.paymentMethod || 'Cash');this.stateManager.updateState('cart.feeDiscount',cartData.feeDiscount ||{type: null,amount: '',label: '',amountType: 'flat'});this.renderCart();}}catch(error){console.error('Failed to load cart state:',error);}}holdCurrentCart(){const cartItems=this.stateManager.getState('cart.items');if(cartItems.length===0)return;const heldCarts=JSON.parse(localStorage.getItem('jpos_held_carts')|| '[]');const cartData={id: Date.now(),timestamp: new Date().toISOString(),items: cartItems,total: this.getCartTotal()};heldCarts.push(cartData);localStorage.setItem('jpos_held_carts',JSON.stringify(heldCarts));this.clearCart();if(window.toastManager){window.toastManager.show('Cart held successfully');}}getCartTotal(){const cartItems=this.stateManager.getState('cart.items');const subtotal=cartItems.reduce((sum,item)=> sum+(item.price*item.qty),0);const feeDiscount=this.stateManager.getState('cart.feeDiscount');let total=subtotal;if(feeDiscount && feeDiscount.type && feeDiscount.amount){const amount=parseFloat(feeDiscount.amount);if(feeDiscount.type==='discount'){total-=amount;}else if(feeDiscount.type==='fee'){total+=amount;}}return Math.max(0,total);}}if(typeof module !=='undefined' && module.exports){module.exports=CartManager;}
class ModuleLoader{constructor(){this.modules={};this.stateManager=null;}async init(){try{this.stateManager=window.stateManager;if(!this.stateManager){throw new Error('State manager not found');}await this.initAuthModule();await this.initProductsModule();await this.initCartModule();await this.initDrawerModule();await this.initOrdersModule();await this.initReportsModule();await this.initSettingsModule();await this.initUtilsModule();window.productsManager=this.modules.products;window.cartManager=this.modules.cart;window.authManager=this.modules.auth;window.drawerManager=this.modules.drawer;window.ordersManager=this.modules.orders;window.reportsManager=this.modules.reports;window.settingsManager=this.modules.settings;window.utilsManager=this.modules.utils;console.log('All modules loaded successfully');return true;}catch(error){console.error('Failed to initialize modules:',error);return false;}}async initAuthModule(){if(typeof AuthManager !=='undefined'){this.modules.auth=new AuthManager(this.stateManager);await this.modules.auth.init();}else{console.error('AuthManager class not found');}}async initProductsModule(){if(typeof ProductsManager !=='undefined'){this.modules.products=new ProductsManager(this.stateManager);}else{console.error('ProductsManager class not found');}}async initCartModule(){if(typeof CartManager !=='undefined'){this.modules.cart=new CartManager(this.stateManager);this.modules.cart.loadCartState();}else{console.error('CartManager class not found');}}async initDrawerModule(){if(typeof DrawerManager !=='undefined'){this.modules.drawer=new DrawerManager(this.stateManager);}else{console.error('DrawerManager class not found');}}async initOrdersModule(){if(typeof OrdersManager !=='undefined'){this.modules.orders=new OrdersManager(this.stateManager);}else{console.error('OrdersManager class not found');}}async initReportsModule(){if(typeof ReportsManager !=='undefined'){this.modules.reports=new ReportsManager(this.stateManager);}else{console.error('ReportsManager class not found');}}async initSettingsModule(){if(typeof SettingsManager !=='undefined'){this.modules.settings=new SettingsManager(this.stateManager);}else{console.error('SettingsManager class not found');}}async initUtilsModule(){if(typeof UtilsManager !=='undefined'){this.modules.utils=new UtilsManager(this.stateManager);}else{console.error('UtilsManager class not found');}}getModule(name){return this.modules[name] || null;}getAllModules(){return this.modules;}}window.moduleLoader=new ModuleLoader();if(typeof module !=='undefined' && module.exports){module.exports=ModuleLoader;}
document.addEventListener('DOMContentLoaded',async()=>{console.log('JPOS Application Starting...');try{const moduleLoader=window.moduleLoader;const success=await moduleLoader.init();if(!success){throw new Error('Failed to initialize modules');}window.appInitializer={async init(){try{await this.loadInitialData();this.setupEventListeners();this.initializeUI();console.log('JPOS Application initialized successfully');}catch(error){console.error('Failed to initialize application:',error);}},async loadInitialData(){if(window.productsManager){const productsData=await window.productsManager.loadProducts();if(productsData.categories && productsData.tags){window.productsManager.buildFilterUI(productsData.categories,productsData.tags);window.productsManager.renderProducts();}}if(window.settingsManager){await window.settingsManager.loadReceiptSettings();}if(window.drawerManager){await window.drawerManager.checkDrawerStatus();}},setupEventListeners(){const loginForm=document.getElementById('login-form');if(loginForm && window.authManager){loginForm.addEventListener('submit',(e)=>{window.authManager.handleLogin(e).then(success=>{if(success){window.authManager.loadFullApp();}});});}const logoutBtn=document.getElementById('logout-btn');if(logoutBtn && window.authManager){logoutBtn.addEventListener('click',()=>{window.authManager.handleLogout();});}const searchInput=document.getElementById('pos-search');if(searchInput && window.productsManager){searchInput.addEventListener('input',(e)=>{window.productsManager.handleSearch(e);});}const checkoutBtn=document.getElementById('checkout-btn');if(checkoutBtn && window.cartManager){checkoutBtn.addEventListener('click',()=>{window.cartManager.processTransaction();});}const clearCartBtn=document.getElementById('clear-cart-btn');if(clearCartBtn && window.cartManager){clearCartBtn.addEventListener('click',()=>{window.cartManager.clearCart();});}const feeBtn=document.getElementById('add-fee-btn');const discountBtn=document.getElementById('add-discount-btn');if(feeBtn && window.cartManager){feeBtn.addEventListener('click',()=> window.cartManager.showFeeDiscountModal('fee'));}if(discountBtn && window.cartManager){discountBtn.addEventListener('click',()=> window.cartManager.showFeeDiscountModal('discount'));}const openDrawerBtn=document.getElementById('open-drawer-btn');const closeDrawerBtn=document.getElementById('close-drawer-btn');if(openDrawerBtn && window.drawerManager){openDrawerBtn.addEventListener('click',()=> window.drawerManager.handleOpenDrawer());}if(closeDrawerBtn && window.drawerManager){closeDrawerBtn.addEventListener('click',()=> window.drawerManager.handleCloseDrawer());}const menuToggle=document.getElementById('menu-toggle');const sideMenu=document.getElementById('side-menu');if(menuToggle && sideMenu){menuToggle.addEventListener('click',()=>{sideMenu.classList.toggle('is-open');document.getElementById('menu-overlay').classList.toggle('hidden');});}const pageLinks=document.querySelectorAll('[data-page]');pageLinks.forEach(link=>{link.addEventListener('click',(e)=>{e.preventDefault();const pageId=link.dataset.page;this.showPage(pageId);});});const feeDiscountModal=document.getElementById('fee-discount-modal');if(feeDiscountModal){const applyBtn=feeDiscountModal.querySelector('#apply-fee-discount');const cancelBtn=feeDiscountModal.querySelector('#cancel-fee-discount');if(applyBtn && window.cartManager){applyBtn.addEventListener('click',()=> window.cartManager.applyFeeDiscount());}if(cancelBtn && window.cartManager){cancelBtn.addEventListener('click',()=> window.cartManager.hideFeeDiscountModal());}}},initializeUI(){this.showPage('pos-page');if(window.cartManager){window.cartManager.renderCart();}if(window.drawerManager){window.drawerManager.updateDrawerUI();}},async showPage(pageId,closeMenu=true){document.querySelectorAll('section.page-content').forEach(page=>{page.classList.add('hidden');});const targetPage=document.getElementById(pageId);if(targetPage){targetPage.classList.remove('hidden');}if(closeMenu){const sideMenu=document.getElementById('side-menu');if(sideMenu && sideMenu.classList.contains('is-open')){sideMenu.classList.remove('is-open');document.getElementById('menu-overlay').classList.add('hidden');}}switch(pageId){case 'orders-page': if(window.ordersManager){await window.ordersManager.fetchOrders();}break;case 'reports-page': if(window.reportsManager){await window.reportsManager.fetchReportsData();}break;case 'sessions-page': if(window.drawerManager){await window.drawerManager.fetchSessions();}break;case 'stock-page': if(window.productsManager){window.productsManager.renderStockList();}break;case 'settings-page': if(window.settingsManager){window.settingsManager.populateSettingsForm();}break;}}};const authManager=moduleLoader.getModule('auth');if(authManager && authManager.isAuthenticated()){await authManager.loadFullApp();}else{authManager.showLoginScreen(true);}}catch(error){console.error('Failed to start JPOS application:',error);document.body.innerHTML=` <div class="flex items-center justify-center min-h-screen bg-slate-900"> <div class="text-center"> <h1 class="text-2xl font-bold text-red-400 mb-4">Application Error</h1> <p class="text-slate-400">Failed to initialize the application. Please refresh the page.</p> <button onclick="location.reload()" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"> Refresh Page </button> </div> </div> `;}});window.showPage=(pageId,closeMenu=true)=>{if(window.appInitializer){window.appInitializer.showPage(pageId,closeMenu);}};window.toggleMenu=()=>{const sideMenu=document.getElementById('side-menu');if(sideMenu){sideMenu.classList.toggle('is-open');document.getElementById('menu-overlay').classList.toggle('hidden');}};
